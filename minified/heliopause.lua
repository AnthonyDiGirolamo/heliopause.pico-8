function sequence(a)local b={}for c=1,#a,2 do for d=1,a[c]do for e in all(a[c+1])do add(b,e)end end end;return b end;damage_colors={7,10,9,8,5,0}damage_colors2=sequence({3,damage_colors})star_color_index=0;star_color_monochrome=0;star_colors={{10,14,12,13,7,6},{9,8,13,1,6,5},{4,2,1,0,5,1},{7,6},{6,5},{5,1}}darkshipcolors={0,1,2,2,1,5,6,2,4,9,3,13,1,8,9}dark_planet_colors={0,0,1,1,0,5,5,5,4,5,5,3,1,1,2,13}function round(c)return flr(c+.5)end;function ceil(f)return-flr(-f)end;function random_plus_to_minus_one()return random_int(3)-1 end;function random_int(e)return flr(rnd(32767))%e end;function random_angle()return Vector(1):rotate(rnd())end;function format_float(e)return flr(e).."."..flr(e%1*10)end;Vector={}Vector.__index=Vector;function Vector.new(f,g)return setmetatable({x=f or 0,y=g or 0},Vector)end;function Vector:draw_point(h)pset(round(self.x),round(self.y),h)end;function Vector:draw_line(i,h)line(round(self.x),round(self.y),round(i.x),round(i.y),h)end;function Vector:round()self.x=round(self.x)self.y=round(self.y)end;function Vector:normalize()local j=self:length()self.x=self.x/j;self.y=self.y/j;return self end;function Vector:rotate(k)local l=cos(k)local s=sin(k)local f=self.x;local g=self.y;self.x=l*f-s*g;self.y=s*f+l*g;return self end;function Vector:add(i)self.x=self.x+i.x;self.y=self.y+i.y;return self end;function Vector.__add(m,n)return Vector.new(m.x+n.x,m.y+n.y)end;function Vector.__sub(m,n)return Vector.new(m.x-n.x,m.y-n.y)end;function Vector.__mul(m,n)return Vector.new(m.x*n,m.y*n)end;function Vector.__div(m,n)return Vector.new(m.x/n,m.y/n)end;function Vector:about_equals(i)return round(i.x)==self.x and round(i.y)==self.y end;function Vector:angle()return atan2(self.x,self.y)end;function Vector:length()return sqrt(self.x^2+self.y^2)end;function Vector:scaled_length()return sqrt((self.x/182)^2+(self.y/182)^2)*182 end;function Vector.distance(m,n)return(n-m):length()end;function Vector:tostring()return format_float(self.x)..", "..format_float(self.y)end;function Vector:clone()return Vector.new(self.x,self.y)end;function Vector:perpendicular()return Vector.new(-self.y,self.x)end;setmetatable(Vector,{__call=function(o,...)return Vector.new(...)end})screen_center=Vector(63,63)Ship={}Ship.__index=Ship;function Ship.new(p,q)local r={npc=false,screen_position=screen_center,sector_position=Vector(),gees=p or 4,turn_rate=q or 8,current_deltav=0,current_gees=0,angle=0,angle_radians=0,heading=90,velocity_angle=0,velocity_angle_opposite=180,velocity=0,velocity_vector=Vector(),orders={}}r.deltav=9.806*r.gees/300;setmetatable(r,Ship)return r end;ship_types={{name="cruiser",min_size=18,max_size=38,shape={3.5,.5,0,-1,.583333,.8125}},{name="fighter",min_size=14,max_size=20,shape={1.5,.25,.75,-2,.7,.8}}}function Ship:generate_random_ship(t,u,v)self.ship_type=v or ship_types[random_int(#ship_types)+1]local w=u or rnd()srand(w)local x={}for c=6,15 do add(x,c)end;for c=1,6 do del(x,random_int(10)+6)end;self.hp=0;self.sprite=nil;local y={}local z=t or 16;self.length=z;local A=flr(z/2)local B=Vector(1,self.ship_type.shape[1])local C=Vector(1,self.ship_type.shape[2])local D=Vector(1,self.ship_type.shape[3])local E=Vector(1,self.ship_type.shape[4])local F=flr(self.ship_type.shape[5]*z)local G=flr(self.ship_type.shape[6]*z)for g=1,z do add(y,{})for f=1,A do add(y[g],x[4])end end;local H=B;local I=C;local J=round(z/3)local K=round(A/4)for g=2,z-1 do for f=1,A do local h=x[1]if g>=J+random_plus_to_minus_one()and g<=2*J+random_plus_to_minus_one()then h=x[3]end;if f>=K+random_plus_to_minus_one()and g>=2*J+random_plus_to_minus_one()then h=x[2]end;if A-f<max(0,flr(H.y))then if rnd()<.6 then y[g][f]=h;self.hp=self.hp+1;if y[g-1][f]==x[4]then y[g][f]=darkshipcolors[h]end end end end;if g>=G then I=E elseif g>=F then I=D end;H=H+I;if H.y>0 and g>3 and g<z-1 then for c=1,random_int(round(H.y/4)+1)do y[g][A-c]=5;self.hp=self.hp+2 end end end;self.sprite_has_odd_columns=random_int(2)for g=z,1,-1 do for f=A-self.sprite_has_odd_columns,1,-1 do add(y[g],y[g][f])end end;self.max_hp=self.hp;self.hp_percent=1;self.sprite_rows=#y;self.sprite_columns=#y[1]self.transparent_color=x[4]self.sprite=y;return self end;function land_at_closest_planet()local L;local M=32767;for N in all(thissector.planets)do if N.planet_type then local O=Vector.distance(playership.sector_position/182,N.sector_position/182)if O<M then M=O;L=N end end end;if M*182<L.radius*1.4 then if playership.velocity<.5 then thissector:reset_planet_visibility()landed_front_rendered=false;landed_back_rendered=false;landed_planet=L;landed=true;landed_menu()draw_rect(128,128,0)else notifications:add("moving too fast to land")end else notifications:add("too far to land")end;return false end;function takeoff()thissector:reset_planet_visibility()playership:set_position_near_object(landed_planet)landed=false;return false end;function Ship:set_position_near_object(P)self.sector_position=random_angle()*1.2*P.radius+P.sector_position;self:reset_velocity()end;function clear_targeted_ship()for Q in all(npcships)do Q.targeted=false end end;function next_ship_target()clear_targeted_ship()playership.target_index=(playership.target_index or#npcships)%#npcships+1;npcships[playership.target_index].targeted=true;return true end;function next_object_target()clear_targeted_ship()return true end;function Ship:draw_sprite_rotated()if self.targeted then local R=self.length/2+2;rect(self.screen_position.x-R,self.screen_position.y-R,self.screen_position.x+ceil(R),self.screen_position.y+R,11)end;local S={}for T in all(projectiles)do if Vector.distance(T.position,self.screen_position)<self.length then add(S,T)end end;local U;local V=self.transparent_color;local m=self.angle_radians;local z=self.sprite_rows;local A=self.sprite_columns;for g=1,A do for f=1,z do local h=self.sprite[f][g]if h~=V and h~=nil then local W=Vector(z-f-flr(z/2),g-flr(A/2)-1)local X=Vector(W.x+1,W.y)W:rotate(m):add(self.screen_position):round()X:rotate(m):add(self.screen_position):round()if self.hp<1 then local Y=random_angle()add(particles,Circle.new(W,Y*rnd(.5),h,#damage_colors2-3,Y*self.length*.5+W))add(particles,Spark.new(W,random_angle()*(rnd(.25)+.25),h,128))else for T in all(S)do if W:about_equals(T.position)or W:about_equals(T.position2)then U=T.ship;add(particles,Circle.new(W,random_angle(),h,#damage_colors-3))if rnd()<.5 then add(particles,Spark.new(W,random_angle()*(2*rnd()+1),h,128))end;self.hp=self.hp-1;self.hp_percent=self.hp/self.max_hp;del(projectiles,T)h=-random_int(#damage_colors)break end end;if h<=0 then if-h<#damage_colors then h=-h+1;self.sprite[f][g]=-h;h=damage_colors[h]else h=5 end end;rectfill(W.x,W.y,X.x,X.y,h)end end end end;if U then self.last_hit_time=secondcount;self.last_hit_attacking_ship=U end end;function Ship:turn_left()self:rotate(self.turn_rate)end;function Ship:turn_right()self:rotate(-self.turn_rate)end;function Ship:rotate(Z)self.angle=(self.angle+Z)%360;self.angle_radians=self.angle/360;self.heading=(450-self.angle)%360 end;function Ship:draw()print_shadowed("ram: "..format_float(stat(0)).."kb  cpu: "..stat(1),0,0)print_shadowed("heading: "..format_float(self.heading),0,7)print_shadowed(10*self.velocity.." m/s",0,14)if self.accelerating then print_shadowed(self.current_gees.."gS",0,21)end;local _=npcships[self.target_index]if _ then if not _:is_visible(self.sector_position)then local O=(_.screen_position/182-self.screen_position/182):normalize()local a0=O*(self.length/2+4)+self.screen_position;local a1=O*(self.length/2+14)+self.screen_position;a0:draw_line(a1,11)local a2=format_float((_.screen_position-self.screen_position):scaled_length())if a1.x>63 then a1:add(Vector(2,-2))else a1:add(Vector(-4*#a2,-2))end;print(a2,round(a1.x),round(a1.y),11)end;print_shadowed("target hp: ".._.hp.."/".._.max_hp.." "..100*_.hp_percent.."%",0,107)end;print_shadowed("hp: "..format_float(100*self.hp_percent),0,114)self:draw_sprite_rotated()end;function Ship:is_visible(a3)local t=self.length;self.screen_position=self.sector_position-a3+screen_center;return self.screen_position.x<128+t and self.screen_position.x>0-t and self.screen_position.y<128+t and self.screen_position.y>0-t end;function Ship:update_location()if self.velocity>0.0 then self.sector_position:add(self.velocity_vector)end end;function Ship:reset_velocity()self.velocity_vector=Vector()self.velocity=0 end;function Ship:set_destination(a4)self.destination=a4.sector_position;self:update_steering_velocity()self.max_distance_to_destination=self.distance_to_destination end;function Ship:flee()self:set_destination(self.last_hit_attacking_ship)self:update_steering_velocity(1)local a5=self.steering_velocity:angle()if self.distance_to_destination<55 then self:rotate_towards_heading(a5)self:apply_thrust()else self:full_stop(true)end end;function Ship:update_steering_velocity(a6)local a7=a6 or-1;local a8=self.sector_position-self.destination;self.distance_to_destination=a8:scaled_length()self.steering_velocity=(a8-self.velocity_vector)*a7 end;function Ship:seek()if self.seektime%20==0 then self:set_destination(npcships[self.target_index]or playership)end;self.seektime=self.seektime+1;local a9=self.destination-self.sector_position;local a2=a9:scaled_length()self.distance_to_destination=a2;local aa=a2/50;local ab=a2/(self.max_distance_to_destination*.7)*aa;local ac=min(ab,aa)local a8=a9*ab/a2;self.steering_velocity=a8-self.velocity_vector;if self:rotate_towards_heading(self.steering_velocity:angle())then self:apply_thrust(abs(self.steering_velocity:length()))end end;function Ship:fly_towards_destination()self:update_steering_velocity()if self.distance_to_destination>self.max_distance_to_destination*.9 then if self:rotate_towards_heading(self.steering_velocity:angle())then self:apply_thrust()end else self.accelerating=false;self:reverse_direction()if self.distance_to_destination<=self.max_distance_to_destination*.11 then self:order_done(self.full_stop)end end end;function Ship:approach_object(ad)local P=ad or thissector.planets[random_int(#thissector.planets)+1]self:set_destination(P)add(self.orders,self.fly_towards_destination)if self.velocity>0 then add(self.orders,self.full_stop)end end;function Ship:follow_current_order()local ae=self.orders[#self.orders]if ae then ae(self)end end;function Ship:order_done(af)self.orders[#self.orders]=af end;function Ship:clear_orders()self.orders={}end;function Ship:cut_thrust()self.accelerating=false;self.current_deltav=self.deltav/3 end;function Ship:wait()if secondcount>self.wait_duration+self.wait_time then self:order_done()end end;function Ship:full_stop()if self.velocity>0 and self:reverse_direction()then self:apply_thrust()if self.velocity<1.2*self.deltav then self:reset_velocity()self:order_done()end end end;function Ship:fire_weapon(ag)local ah=Vector(1):rotate(self.angle_radians)local ai=ah*self.length/2+self.screen_position;if framecount%3==0 then add(projectiles,MultiCannon.new(ai,ah*6+self.velocity_vector,12,self))sfx(0)end end;function Ship:apply_thrust(aj)self.accelerating=true;if self.current_deltav<self.deltav then self.current_deltav=self.current_deltav+self.deltav/30 else self.current_deltav=self.deltav end;local ak=self.current_deltav;if aj and ak>aj then ak=aj end;if self.hp_percent<.15+rnd(.1)-.05 then ak=0 end;self.current_gees=ak*300/9.806;local m=self.angle_radians;local al=Vector(cos(m)*ak,sin(m)*ak)self.velocity_vector:add(al)if self.velocity_vector.x>180 or self.velocity_vector.y>180 then self.velocity=self.velocity_vector:scaled_length()else self.velocity=self.velocity_vector:length()end;self.velocity_angle=self.velocity_vector:angle()self.velocity_angle_opposite=(self.velocity_angle+0.5)%1;local am=Vector(1):rotate(m)*-(self.length/2)+self.screen_position;if self.velocity<.05 then self.velocity=0.0;self.velocity_vector=Vector()else add(particles,ThrustExhaust.new(am,al*-1.3*self.length))end end;function Ship:reverse_direction()if self.velocity>0.0 then return self:rotate_towards_heading(self.velocity_angle_opposite)end end;function Ship:rotate_towards_heading(an)local ao=(an*360-self.angle+180)%360-180;if ao~=0 then local ap=self.turn_rate*ao/abs(ao)if abs(ao)>abs(ap)then ao=ap end;self:rotate(ao)end;return ao<0.1 and ao>-.1 end;Star={}Star.__index=Star;function Star.new()return setmetatable({position=Vector(),color=7,speed=1},Star)end;function Star:reset(f,g)self.position.x=f or random_int(128)self.position.y=g or random_int(128)self.color=random_int(#star_colors[star_color_monochrome+star_color_index+1])+1;self.speed=rnd(0.75)+0.25;return self end;sun_colors={{6,14,10,9,13},{7,8,9,10,12}}Sun={}Sun.__index=Sun;function Sun.new(aq,f,g)local ap=aq or 64+random_int(128)local l=random_int(5)+1;return setmetatable({screen_position=Vector(),radius=ap,sun_color_index=l,color=sun_colors[2][l],sector_position=Vector(f or 0,g or 0)},Sun)end;function stellar_object_is_visible(P,ar)P.screen_position=P.sector_position-ar+screen_center;return P.screen_position.x<128+P.radius and P.screen_position.x>0-P.radius and P.screen_position.y<128+P.radius and P.screen_position.y>0-P.radius end;function Sun:draw(ar)if stellar_object_is_visible(self,ar)then for c=0,1 do circfill(self.screen_position.x,self.screen_position.y,self.radius-c*3,sun_colors[c+1][self.sun_color_index])end end end;starfield_count=50;Sector={}Sector.__index=Sector;function Sector.new()local as={seed=random_int(32767),planets={},starfield={}}srand(as.seed)for c=1,starfield_count do as.starfield[c]=Star.new():reset()end;setmetatable(as,Sector)return as end;function Sector:reset_planet_visibility()for N in all(self.planets)do N.rendered_circle=false;N.rendered_terrain=false end end;function Sector:new_planet_along_elipse()local f;local g;local at;local au=true;while au do f=rnd(150)g=sqrt((rnd(35)+40)^2*(1-f^2/(rnd(50)+100)^2))if rnd()<.5 then f=f*-1 end;if rnd()<.75 then g=g*-1 end;if#self.planets==0 then break end;at=32767;for N in all(self.planets)do local O=abs(Vector.distance(Vector(f,g),N.sector_position/33))if O<at then at=O end end;au=at<15;if not au then break end end;local av=(1-Vector(f,g):angle()-.25)%1;f=f*33;g=g*33;return Planet.new(f,g,av)end;function Sector:draw_starfield(aw)local ax;local ay;for az in all(self.starfield)do ax=az.position+aw*az.speed*-.5;ay=az.position+aw*az.speed*.5;local c=star_color_monochrome+star_color_index+1;local aA=#star_colors[c]local aB=1+(az.color-1)%aA;az.position:draw_line(ay,star_colors[c+1][aB])ax:draw_line(az.position,star_colors[c][aB])end end;function Sector:scroll_starfield(aw)local aC=starfield_count-#self.starfield;for c=1,aC do add(self.starfield,Star.new():reset())end;for az in all(self.starfield)do az.position:add(aw*az.speed*-1)if aC<0 then del(self.starfield,az)aC=aC+1 elseif az.position.x>134 then az:reset(-6)elseif az.position.x<-6 then az:reset(134)elseif az.position.y>134 then az:reset(false,-6)elseif az.position.y<-6 then az:reset(false,134)end end end;function is_offscreen(N,aD)local aE=aD or 0;local aF=0-aE;local aG=128+aE;local f=N.position.x;local g=N.position.y;return N.duration<0 or f>aG or f<aF or g>aG or g<aF end;MultiCannon={}MultiCannon.__index=MultiCannon;function MultiCannon.new(N,aH,l,aI)local aJ=aH:perpendicular():normalize()*(rnd(2)-1)return setmetatable({position=N,position2=N:clone(),particle_velocity=aH+aJ,color=l,ship=aI,duration=256},MultiCannon)end;function MultiCannon:draw(aw)self.position:add(self.particle_velocity-aw)self.position2:draw_line(self.position,self.color)self.position2=self.position:clone()self.duration=self.duration-1 end;Spark={}Spark.__index=Spark;function Spark.new(N,aH,l,O)return setmetatable({position=N,particle_velocity=aH,color=l,duration=O or random_int(5)+2},Spark)end;function Spark:update(aw)self.position:add(self.particle_velocity-aw)self.duration=self.duration-1 end;function Spark:draw(aw)pset(self.position.x,self.position.y,self.color)self:update(aw)end;Circle={}Circle.__index=Circle;function Circle.new(N,aH,l,O,aK)return setmetatable({position=N:clone(),particle_velocity=aH,color=l,center_position=aK or N:clone(),duration=O},Circle)end;function Circle:draw(aw)local aL=flr(Vector.distance(self.position,self.center_position))for c=aL+3,aL,-1 do local l=damage_colors2[#damage_colors2-3-self.duration+c]if l then circfill(self.center_position.x,self.center_position.y,c,l)end end;self:update(aw)end;setmetatable(Circle,{__index=Spark})ThrustExhaust={}ThrustExhaust.__index=ThrustExhaust;function ThrustExhaust.new(N,aH)return setmetatable({position=N,particle_velocity=aH,duration=0},ThrustExhaust)end;function ThrustExhaust:draw(aw)local l=9+random_int(2)local aJ=self.particle_velocity:perpendicular()*0.7;local aM=self.particle_velocity*(rnd(2)+2)+aJ*(rnd()-.5)local aN=self.position+aM;local a0=self.position+self.particle_velocity+aJ;local a1=self.position+self.particle_velocity+aJ*-1;local aO=self.position;a0:draw_line(aN,l)a1:draw_line(aN,l)a1:draw_line(aO,l)a0:draw_line(aO,l)if rnd()>.4 then add(particles,Spark.new(aN,aw+aM*.25,l))end;self.position:add(self.particle_velocity-aw)self.duration=self.duration-1 end;function draw_circle(aP,aQ,aq,aR,h)local aS={}local aT=not aR;local aU=0;local aV=0;local f=-aq;local g=0;local aW=2-2*aq;while f<0 do aS[1+f*-1]=g;if aT then aU=f;aV=g end;for c=f,aU do sset(aP-c,aQ+g,h)sset(aP+c,aQ-g,h)end;for c=aV,g do sset(aP-c,aQ-f,h)sset(aP+c,aQ+f,h)end;aq=aW;if aq<=g then g=g+1;aW=aW+g*2+1 end;if aq>f or aW>g then f=f+1;aW=aW+f*2+1 end end;aS[1]=aS[2]return aS end;function draw_moon_at_ycoord(aX,aY,aZ,aq,av,aS,a_)local f;local g;local b0;local b1;local b2;local c;local b3;local b4;g=aq-aX;local b5=abs(g)+1;if b5<=#aS then f=flr(sqrt(aq*aq-g*g))b0=2*f;if av<.5 then b1=-aS[b5]b2=flr(b0-2*av*b0-f)else b1=flr(f-2*av*b0+b0)b2=aS[b5]end;for c=b1,b2 do if not a_ or av<.5 and c>b2-2 or av>=.5 and c<b1+2 then b3=dark_planet_colors[sget(aY+c,aZ-g)+1]else b3=0 end;sset(aY+c,aZ-g,b3)end end end;perms={}for c=0,255 do perms[c]=c end;for c=0,255 do local ap=random_int(32767)%256;perms[c],perms[ap]=perms[ap],perms[c]end;local b6={}for c=0,255 do local f=perms[c]%12;perms[c+256],b6[c],b6[c+256]=perms[c],f,f end;local b7={{1,1,0},{-1,1,0},{1,-1,0},{-1,-1,0},{1,0,1},{-1,0,1},{1,0,-1},{-1,0,-1},{0,1,1},{0,-1,1},{0,1,-1},{0,-1,-1}}for b8 in all(b7)do for c=0,2 do b8[c]=b8[c+1]end end;for c=0,11 do b7[c]=b7[c+1]end;function GetN_3d(b9,ba,bb,f,g,bc)local bd=.6-f*f-g*g-bc*bc;local be=b6[b9+perms[ba+perms[bb]]]return max(0,bd*bd*bd*bd)*(b7[be][0]*f+b7[be][1]*g+b7[be][2]*bc)end;function Simplex3D(f,g,bc)local s=(f+g+bc)*0.333333333;local b9,ba,bb=flr(f+s),flr(g+s),flr(bc+s)local bd=(b9+ba+bb)*0.166666667;local bf=f+bd-b9;local bg=g+bd-ba;local bh=bc+bd-bb;b9,ba,bb=band(b9,255),band(ba,255),band(bb,255)local bi=GetN_3d(b9,ba,bb,bf,bg,bh)local bj=GetN_3d(b9+1,ba+1,bb+1,bf-0.5,bg-0.5,bh-0.5)local bk,bl,bm,bn,bo,bp;if bf>=bg then if bg>=bh then bk,bl,bm,bn,bo,bp=1,0,0,1,1,0 elseif bf>=bh then bk,bl,bm,bn,bo,bp=1,0,0,1,0,1 else bk,bl,bm,bn,bo,bp=0,0,1,1,0,1 end else if bg<bh then bk,bl,bm,bn,bo,bp=0,0,1,0,1,1 elseif bf<bh then bk,bl,bm,bn,bo,bp=0,1,0,0,1,1 else bk,bl,bm,bn,bo,bp=0,1,0,1,1,0 end end;local bq=GetN_3d(b9+bk,ba+bl,bb+bm,bf+0.166666667-bk,bg+0.166666667-bl,bh+0.166666667-bm)local br=GetN_3d(b9+bn,ba+bo,bb+bp,bf+0.333333333-bn,bg+0.333333333-bo,bh+0.333333333-bp)return 32*(bi+bq+br+bj)end;function create_planet_type(bs,bt,bu,bv,bw,bx,by,bz)return{class_name=bs,noise_octaves=bt,noise_zoom=bu,noise_persistance=bv,transparent_color=bz or 14,minimap_color=bw,full_shadow=by or"yes",color_map=bx}end;planet_types={create_planet_type("tundra",5,.5,.6,6,{7,6,5,4,5,6,7,6,5,4,3}),create_planet_type("desert",5,.35,.3,9,sequence({3,{4,4,9,9},1,{11,1},5,{9,4,9}})),create_planet_type("barren",5,.55,.35,5,{5,6,5,0,5,6,7,6,5,0,5,6}),create_planet_type("lava",5,.55,.65,4,{0,4,0,5,0,4,0,4,9,8,4,0,4,0,5,0,4,0}),create_planet_type("gas giant",1,.4,.75,2,{7,6,13,1,2,1,12}),create_planet_type("gas giant",1,.4,.75,8,{7,15,14,2,1,2,8,8},nil,12),create_planet_type("gas giant",1,.7,.75,10,{15,10,9,4,9,10}),create_planet_type("terran",5,.3,.65,11,sequence({7,{1},1,{13,12,15},2,{11},3,{3},1,{4,5,6,7}}),"partial shadow"),create_planet_type("island",5,.55,.65,12,sequence({8,{1},1,{13,12,15},1,{11,3}}),"partial shadow")}Planet={}Planet.__index=Planet;function Planet.new(f,g,av,ap)local bA=planet_types[random_int(#planet_types)+1]local bB=bA.noise_factor_vert or 1;if bA.class_name=="gas giant"then bA.min_size=50;bB=4;if rnd()<.5 then bB=20 end end;local bC=bA.min_size or 10;local aq=ap or bC+random_int(64-bC)+1;return setmetatable({screen_position=Vector(),radius=aq,sector_position=Vector(f,g),bottom_right_coord=2*aq-1,phase=av,planet_type=bA,noise_factor_vert=bB,noisedx=rnd(1024),noisedy=rnd(1024),noisedz=rnd(1024),rendered_circle=false,rendered_terrain=false,color=bA.minimap_color},Planet)end;function Planet:draw(ar)if stellar_object_is_visible(self,ar)then self:render_a_bit_to_sprite_sheet()sspr(0,0,self.bottom_right_coord,self.bottom_right_coord,self.screen_position.x-self.radius,self.screen_position.y-self.radius)end end;function draw_rect(bD,bE,l)for f=0,bD-1 do for g=0,bE-1 do sset(f,g,l)end end end;function Planet:render_a_bit_to_sprite_sheet(bF,bG)local aq=self.radius-1;if bF then aq=47 end;if not self.rendered_circle then self.width=self.radius*2;self.height=self.radius*2;self.x=0;self.yfromzero=0;self.y=aq-self.yfromzero;self.phi=0;thissector:reset_planet_visibility()pal()palt(0,false)palt(self.planet_type.transparent_color,true)if bF then self.width=114;self.height=96;draw_rect(self.width,self.height,0)else draw_rect(self.width,self.height,self.planet_type.transparent_color)self.bxs=draw_circle(aq,aq,aq,true,0)draw_circle(aq,aq,aq,false,self.planet_type.minimap_color)notifications:add("scanning surface")end;self.rendered_circle=true end;if not self.rendered_terrain and self.rendered_circle then local bH=0;local bI=.5;local bJ=bI/self.width;if bF and bG then bH=.5;bI=1 end;if self.phi<=.25 then for bK=bH,bI-bJ,bJ do if sget(self.x,self.y)~=self.planet_type.transparent_color then local bL=self.planet_type.noise_zoom;local bM=0;local bN=1;local bO=0;for e=1,self.planet_type.noise_octaves do bO=bO+Simplex3D(self.noisedx+bL*cos(self.phi)*cos(bK),self.noisedy+bL*cos(self.phi)*sin(bK),self.noisedz+bL*sin(self.phi)*self.noise_factor_vert)bM=bM+bN;bN=bN*self.planet_type.noise_persistance;bL=bL*2 end;bO=bO/bM;if bO>1 then bO=1 end;if bO<-1 then bO=-1 end;bO=bO+1;bO=bO*(#self.planet_type.color_map-1)/2;bO=round(bO)sset(self.x,self.y,self.planet_type.color_map[bO+1])end;self.x=self.x+1 end;if not bF then draw_moon_at_ycoord(self.y,aq,aq,aq,self.phase,self.bxs,self.planet_type.full_shadow=="yes")end;self.x=0;if self.phi>=0 then self.phi=self.phi+.5/(self.height-1)self.yfromzero=self.yfromzero+1;self.y=aq+self.yfromzero else self.y=aq-self.yfromzero end;self.phi=self.phi*-1 else self.rendered_terrain=true;notifications:add("planet class: "..self.planet_type.class_name)notifications:cancel_all("scanning surface")end end;return self.rendered_terrain end;function load_sector()thissector=Sector.new()notifications:cancel_all()notifications:add("arriving in system ngc "..thissector.seed)for c=0,random_int(1)do add(thissector.planets,Sun.new())end;for c=0,1+random_int(12)do add(thissector.planets,thissector:new_planet_along_elipse())end;playership:set_position_near_object(thissector.planets[1])npcships={}for N in all(thissector.planets)do for c=1,random_int(4)do local bP=Ship.new(2,4):generate_random_ship(12+random_int(8))bP:set_position_near_object(N)bP.npc=true;add(npcships,bP)end end;npcships[1].hostile=true;return true end;function _init()paused=false;landed=false;particles={}projectiles={}notifications=Notification.new()playership=Ship.new()playership:generate_random_ship()load_sector()setup_minimap()end;minimap_sizes={16,32,52,128,false}function setup_minimap(t)minimap_size_index=t or 0;minimap_size=minimap_sizes[minimap_size_index+1]if minimap_size then minimap_size_halved=minimap_size/2;minimap_offset=Vector(126-minimap_size_halved,minimap_size_halved+1)end end;function draw_minimap_planet(P)local bQ=P.sector_position+screen_center;if P.planet_type then bQ:add(Vector(-P.radius,-P.radius))end;bQ=bQ/minimap_denominator+minimap_offset;if minimap_size>100 then local ap=ceil(P.radius/32)circ(bQ.x,bQ.y,ap+1,P.color)else bQ:draw_point(P.color)end end;function draw_minimap_ship(P)local bR=(P.sector_position/minimap_denominator):add(minimap_offset)if P.npc then bR:draw_point(6)else rect(bR.x-1,bR.y-1,bR.x+1,bR.y+1,15)end end;function draw_minimap()if minimap_size then if minimap_size<100 then rectfill(126-minimap_size,1,126,minimap_size+1,0)rect(125-minimap_size,0,127,minimap_size+2,6,11)end;local f=abs(playership.sector_position.x)local g=abs(playership.sector_position.y)if g>f then f=g end;local bS=min(6,flr(f/5000)+1)minimap_denominator=bS*5000/minimap_size_halved;for N in all(thissector.planets)do draw_minimap_planet(N)end;if framecount%2==1 then for Q in all(npcships)do draw_minimap_ship(Q)end;draw_minimap_ship(playership)end end end;function print_shadowed(bT,f,g,h,bU,bV)local l=h or 6;local s=bU or 5;if bV then local bW={-1,-1,1,-1,-1,1,-1,0,1,0,0,-1,0,1}for c=1,#bW,2 do print(bT,f+bW[c],g+bW[c+1],s)end end;print(bT,f+1,g+1,s)print(bT,f,g,l)end;Notification={}Notification.__index=Notification;function Notification.new()return setmetatable({messages={},display_time=4},Notification)end;function Notification:add(bT)add(self.messages,bT)end;function Notification:cancel_current()del(self.messages,self.messages[1])self.display_time=4 end;function Notification:cancel_all(bT)if bT then del(self.messages,bT)else self.messages={}end;self.display_time=4 end;function Notification:draw()local bX=#self.messages;if bX>0 then local aD=self.messages[1]print_shadowed(aD,0,121)if framecount==29 then self.display_time=self.display_time-1 end;if self.display_time<1 then self:cancel_current()end end end;function call_option(c)if current_option_callbacks[c]then local bY=current_option_callbacks[c]()paused=false;if bY==nil then paused=true elseif bY then display_menu(nil,nil,c)if type(bY)=="string"then print_shadowed(bY,64-round(4*#bY/2),40,11,0,true)end;paused=true end end end;function display_menu(bZ,b_,c0)if bZ then current_options=bZ;current_option_callbacks=b_ end;if not landed then render_game_screen()end;local aK=Vector(64,90)local c1=aK+Vector(-1,2)for m=.25,1,.25 do local c=m*4;local c2=6;local c3=0;if c0==c then c2=11 end;local N=Vector(8):rotate(m)+c1;N:draw_line(Vector(3):rotate(m)+c1,c2)N:draw_line(Vector(5,2):rotate(m)+c1,c2)N:draw_line(Vector(5,-2):rotate(m)+c1,c2)if current_options[c]then N=Vector(14):rotate(m)+aK;if m==.5 then N:add(Vector(-4*#current_options[c]))elseif m~=1 then N:add(Vector(round(-4*#current_options[c]/2)))end;print_shadowed(current_options[c],N.x,N.y,c2,c3,true)end end end;function main_menu()display_menu({"inventory","debug","display options","systems"},{nil,function()display_menu({"new ship","back","new sector"},{function()s=(s+2)%48;if s<8 then s=8 end;playership:generate_random_ship(s)return"ship size: "..s end,main_menu,load_sector})end,function()display_menu({"starfield","back","minimap size"},{function()display_menu({"more stars","~dimming","less stars","~colors"},{function()starfield_count=starfield_count+5;return"star count: "..starfield_count end,function()star_color_index=(star_color_index+1)%2;return true end,function()starfield_count=max(0,starfield_count-5)return"star count: "..starfield_count end,function()star_color_monochrome=(star_color_monochrome+1)%2*3;return true end})end,main_menu,function()setup_minimap((minimap_size_index+1)%#minimap_sizes)return true end})end,function()display_menu({"autopilot","back","land","target next"},{function()display_menu({"stop","back","seek","approach"},{function()playership:clear_orders()add(playership.orders,playership.full_stop)return false end,main_menu,function()playership:clear_orders()playership.seektime=0;add(playership.orders,playership.seek)return false end,function()playership:clear_orders()playership:approach_object()return false end})end,main_menu,land_at_closest_planet,next_ship_target})end})end;function landed_menu()display_menu({"takeoff"},{takeoff})end;local c4=0;local c5={}for c=1,96 do c5[c]={flr(-sqrt(-sin(c/193))*48+64)}c5[c][2]=(64-c5[c][1])*2 end;for c=0,95 do poke(64*c+56,peek(64*c+0x1800))end;local c6={}for c=0,15 do c6[c]={(cos(0.5+0.5/16*c)+1)/2}c6[c][2]=(cos(0.5+0.5/16*(c+1))+1)/2-c6[c][1]end;function shift_sprite_sheet()for c=0,95 do poke(64*c+0x1838,peek(64*c))memcpy(64*c,64*c+1,56)memcpy(64*c+0x1800,64*c+0x1801,56)poke(64*c+56,peek(64*c+0x1800))end end;function landed_update()local N=landed_planet;if not landed_front_rendered then landed_front_rendered=N:render_a_bit_to_sprite_sheet(true)if landed_front_rendered then N.rendered_circle=false;N.rendered_terrain=false;for c7=1,56 do shift_sprite_sheet()end end else if not landed_back_rendered then landed_back_rendered=N:render_a_bit_to_sprite_sheet(true,true)else c4=1-c4;if c4==0 then shift_sprite_sheet()end end end end;function render_landed_screen()cls()if landed_front_rendered and landed_back_rendered then for c=1,96 do local m,n=c5[c][1],c5[c][2]pal()local c8=ceil(n*c6[15][2])for c7=15,0,-1 do if c7==4 then for c9=0,#dark_planet_colors-1 do pal(c9,dark_planet_colors[c9+1])end end;if c7<15 then c8=flr(m+n*c6[c7+1][1])-flr(m+n*c6[c7][1])end;sspr(c4+c7*7,c-1,7,1,flr(m+n*c6[c7][1]),c+16,c8,1)end end;pal()print_shadowed("landed at ...",1,1,7,5,true)else sspr(0,0,127,127,0,0)print_shadowed("mapping surface...",1,1,7,5,true)end end;s=8;framecount=0;secondcount=0;function _update()framecount=(framecount+1)%30;if framecount==0 then secondcount=secondcount+1 end;if not landed and btnp(4,0)then paused=not paused;if paused then main_menu()end end;if landed then landed_update()end;if paused or landed then if btnp(2)then call_option(1)end;if btnp(0)then call_option(2)end;if btnp(3)then call_option(3)end;if btnp(1)then call_option(4)end else if btn(0,0)then playership:turn_left()end;if btn(1,0)then playership:turn_right()end;if btn(3,0)then playership:reverse_direction()end;if btn(5,0)then playership:fire_weapon()end;if btn(2,0)then playership:apply_thrust()if playership.current_deltav<playership.deltav then camera(random_int(2)-1,random_int(2)-1)else camera()end else if playership.accelerating and not playership.orders[1]then camera()playership:cut_thrust()end end;for Q in all(npcships)do if Q.last_hit_time and Q.last_hit_time+30>secondcount then Q:clear_orders()Q:flee()else if#Q.orders==0 then if Q.hostile then Q.seektime=0;add(Q.orders,Q.seek)else Q:approach_object()Q.wait_duration=11+random_int(50)Q.wait_time=secondcount;add(Q.orders,Q.wait)end end;Q:follow_current_order()end;Q:update_location()if Q.hp<1 then del(npcships,Q)playership.target_index=false end end;playership:follow_current_order()playership:update_location()thissector:scroll_starfield(playership.velocity_vector)end end;function render_game_screen()cls()thissector:draw_starfield(playership.velocity_vector)for ca in all(thissector.planets)do ca:draw(playership.sector_position)end;for Q in all(npcships)do if Q:is_visible(playership.sector_position)then Q:draw_sprite_rotated()end end;if playership.hp<1 then playership:generate_random_ship()end;playership:draw()for cb in all(particles)do if is_offscreen(cb)then del(particles,cb)else cb:draw(playership.velocity_vector)end end;for T in all(projectiles)do if is_offscreen(T,63)then del(projectiles,T)else T:draw(playership.velocity_vector)end end;draw_minimap()notifications:draw()end;function _draw()if landed then render_landed_screen()display_menu()elseif not paused then render_game_screen()end end
